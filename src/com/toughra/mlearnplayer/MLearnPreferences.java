/*
 * Ustad Mobil.  
 * Copyright 2011-2013 Toughra Technologies FZ LLC.
 * www.toughra.com
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 */
package com.toughra.mlearnplayer;

import java.io.*;
import java.util.Enumeration;
import java.util.Hashtable;

/**
 * Utility class used to save learner preferences as a serialized hashtable
 * using DataInputStream and DataOutputStream
 * 
 * For preference keys supported by the application please see the Wiki
 * 
 * @author mike
 */
public class MLearnPreferences {
    
    /** The Hashtable where preferences are maintained in memory*/
    public Hashtable prefs;
    
    /**
     * Constructor method
     */
    public MLearnPreferences() {
        prefs = new Hashtable();
    }
    
    /**
     * Converts a Hashtable to an array of bytes that can be used to serialize.
     * 
     * Writes first the number of elements in the table with writeInt and then
     * writes UTF8 Strings for each element.
     * 
     * @param ht Hashtable to serialize 
     * @return byte array that can be used to serialize the hashtable
     */
    public static byte[] toByteArray(Hashtable ht) {
        int numElements = ht.size();
        byte[] b = null;
        try {
            ByteArrayOutputStream bout = new ByteArrayOutputStream();
            DataOutputStream dout = new DataOutputStream(bout);
            dout.writeInt(numElements);
            Enumeration e = ht.keys();
            while(e.hasMoreElements()) {
                Object key = e.nextElement();
                Object val = ht.get(key);
                dout.writeUTF(key.toString());
                dout.writeUTF(val.toString());
            }
            b = bout.toByteArray();
            bout.close();
            dout.close();
        }catch(IOException e) {
            e.printStackTrace();
        }
        
        return b;
    }
    
    /**
     * Reads a Hashtable that was serialized using toByteArray
     * 
     * @param b byte array as was generated by toByteArray
     * @return Hashtable object from the table.
     */
    public static Hashtable fromByteArray(byte[] b) {
        Hashtable ht = new Hashtable();
        try {
            ByteArrayInputStream bin = new ByteArrayInputStream(b);
            DataInputStream din = new DataInputStream(bin);
            int numElements = din.readInt();
            for(int i = 0; i < numElements; i++) {
                String key = din.readUTF();
                String val = din.readUTF();
                ht.put(key, val);
            }
            
            din.close();
            bin.close();
        }catch(IOException e) {
            e.printStackTrace();
        }
        return ht;
    }
    
    /**
     * Load the preferences from an array of bytes
     * @param b array of bytes to write
     */
    public void load(byte[] b) {
        prefs = fromByteArray(b);
    }
    
    /**
     * Returns the preferences hashtable as byte array
     * @return 
     */
    public byte[] save() {
        return toByteArray(prefs);
    }
    
    /**
     * Gets the preference value for a given key
     * 
     * @param key to fetch preference value for
     * @return the value of the preference if set, null otherwise
     */
    public String getPref(String key) {
        Object val = prefs.get(key);
        if(val == null) {
            return null;
        }else {
            return val.toString();
        }
    }
    
    /**
     * Set the given preference
     * @param key key for the preference
     * @param value value to set the preference to
     */
    public void setPref(String key, String value) {
        prefs.put(key, value);
    }
    
}
